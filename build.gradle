buildscript {
	apply from: file("$rootDir/projectConfig.gradle")

	ext.versionCatalog = extensions.getByType(VersionCatalogsExtension).named("dep")

	repositories {
		google()
		mavenCentral()
		maven {
			name = "r8"
			url = "https://storage.googleapis.com/r8-releases/raw"
			content { includeGroup("com.android.tools") }
		}
	}

	dependencies {
		classpath dep.plugins.r8.get().toString()
		classpath dep.plugins.android.get().toString()
		classpath dep.plugins.kotlin.get().toString()
	}

	def plugins = versionCatalog
			.getPluginAliases()
			.collect { versionCatalog.findPlugin(it).get().get() }
			.collect { "${it.pluginId}:${it.version}" }
	configurations.configureEach { resolutionStrategy.forcedModules = plugins }
}

def libsResolved = [:]
versionCatalog.getLibraryAliases().collect { versionCatalog.findLibrary(it).get().get() }.forEach {
	if (it.group != null && it.name != null && it.version != null) {
		def artifact = it.group + ":" + it.name
		if (libsResolved.containsKey(artifact)) libsResolved.remove(artifact)
		else libsResolved.put(artifact, it.version)
	}
}
def libs = libsResolved.collect { "${it.key}:${it.value}" }

subprojects {
	repositories {
		google()
		mavenCentral()
	}

	configurations.configureEach { config -> resolutionStrategy.forcedModules = libs }
}

apply from: file("$rootDir/gradle/plugins/configureSubprojects.gradle")
configureSubprojects()

if (hasProperty("buildScan")) buildScan {
	termsOfServiceUrl = "https://gradle.com/terms-of-service"
	termsOfServiceAgree = "yes"
}